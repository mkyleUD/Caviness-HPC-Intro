To demonstrate, let's use `vpkg_history`. `vpkg_history` shows all loaded software packages.

```
{{ site.host_prompt }} vpkg_history
```
{: .language-bash}
```
[standard]
 python/3.6.5

```
{: .output}

```
{{ site.host_prompt }} vpkg_require paraview
{{ site.host_prompt }} vpkg_history
```
{: .language-bash}
```
Adding dependency `libfabric/1.9.0` to your environment
Adding dependency `openmpi/4.0.2` to your environment

[standard]
  python/3.6.5
[standard]
  libfabric/1.6.1
  openmpi/3.1.0


```
{: .output}

So in this case, loading the `openmpi` package ( a Message Passing Interface (MPI) library), also loaded
`libfabric/1.6.1` as well. Let's try unloading the `openmpi` package.

```
{{ site.host_prompt }} vpkg_rollback 1
{{ site.host_prompt }} vpkg_history
```
{: .language-bash}
```
[standard]
  python/3.6.5
```
{: .output}

So using `vpkg_rollback 1 ` "un-loads" a software package along with its dependencies.
For each increase in the number value will increase "steps back" in software that has 
been load. If we wanted to unload everything at once, we could run `vpkg_rollback all`
(unloads everything).

```
{{ site.host_prompt }} vpkg_rollback all
{{ site.host_prompt }} vpkg_history
```
{: .language-bash}
```
            # Again, when there are not software packages loaded a blank line with be returned.
```
{: .output}

